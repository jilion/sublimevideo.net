SublimeVideo.homeReady = ->
  SublimeVideo.setupHomeSublime()
  SublimeVideo.pickRandomVideoThumb()
  # (new SublimeVideo.Quotes).randomShow() if $('section.showcase').exists()

SublimeVideo.setupHomeSublime = ->
  sublime.ready ->
      SublimeVideo.HomeDemoInstance = new SublimeVideo.HomeDemo("#home_demo_player")
    # if horizon_lightbox = sublime('lightbox_horizon')
    #   horizon_lightbox.on
    #     didopen: ->
    #       SublimeVideo.solutionSlideshow.stopTimer() if SublimeVideo.solutionSlideshow?
    #       SublimeVideo.showcasesSlideshow.stopTimer() if SublimeVideo.showcasesSlideshow?
    #     didclose: ->
    #       SublimeVideo.solutionSlideshow.startTimer() if SublimeVideo.solutionSlideshow?
    #       SublimeVideo.showcasesSlideshow.startTimer() if SublimeVideo.showcasesSlideshow?
    #     contentready: (lightbox, player) ->
    #       player = lightbox unless player
    #       player.on 'action:showcases', ->
    #         go = -> document.location.href = '/tailor-made-players'
    #         if player.isFullscreen() then player.exitFullscreen(go) else go()
    #       player.on 'action:teamup', ->
    #         go = -> document.location.href = '/tailor-made-players-requests/new'
    #         if player.isFullscreen() then player.exitFullscreen(go) else go()
    #       player.on 'action:signup', ->
    #         go = ->
    #           sublime('lightbox_horizon').close()
    #           SublimeVideo.UI.Utils.openAccountPopup('signup')
    #         if player.isFullscreen() then player.exitFullscreen(go) else go()
    #   
    #
    # if document.location.hash == '#horizon-video'
    #   horizon_lightbox.open()
    
  if $("#customers-quotes-slideshow")    
    $("#customers-quotes-slideshow > li:gt(0)").hide().addClass("blur")

    setInterval -> 
      $el = $('#customers-quotes-slideshow > li:first')
      $el.addClass("blur").fadeOut 800, ->
        $el.next().fadeIn(800).removeClass("blur")
        $el.appendTo('#customers-quotes-slideshow')
    , 9000
    

# SublimeVideo.postersPaths = <%= (1..6).inject([]) { |memo, n| memo << image_path("home/video/posters/poster_#{n}.jpg") } %>

SublimeVideo.pickRandomVideoThumb = ->
  if ($homeVideo = $('#home_video')).exists()
    imgIndex = Math.floor(Math.random()*6)

    thumbs = $homeVideo.find('img.video_thumb')
    thumbs.hide()

    # Lightbox thumb
    $(thumbs[imgIndex]).show()
    $homeVideo.show()

    # Lightbox poster
    unless SublimeVideo.isMobile()
      posterImage = new Image()
      posterImage.src = SublimeVideo.postersPaths[imgIndex]
    $video = $("#video_horizon")
    $video.attr("poster", SublimeVideo.postersPaths[imgIndex])

SublimeVideo.fadeInHackForChrome = ($div) ->
  if /Chrome/i.test(navigator.userAgent)
    $div.css('left', '49px')
    setTimeout((-> $div.css('left', '50px')), 10)

  
class SublimeVideo.HomeDemo
  constructor: (player) ->
    @player = $(player)
    @features = $('ul.demo-video-actions')
    @kitSelector = $('ul.demo-choose-design')
    @setupObservers()
    
  setupObservers: ->
    @features.find('li a').each (index, element) =>
      @manageTogglerBtn(element, 'feature')
    @kitSelector.find('li a').each (index, element) =>
      @manageTogglerBtn(element, 'kit')
  
  manageTogglerBtn: (element, attribute) ->
    btn = $(element)
    autoplay = true
    btn.on 'click', (event) =>
      if attribute is "kit"
        @kitSelector.find('li').removeClass('active')
        autoplay = false
      event.preventDefault()
      @setupAttribute btn.data(attribute), autoplay
      btn.parent().toggleClass('active')
    
  setupAttribute: (value, autoplay) ->
    @unprepareVideo()
    switch value
      when 9, 10, 11
        @player.attr('data-player-kit',value)
      when "youtube"
        if @player.attr('data-youtube-id')?
          @player.removeAttr('data-youtube-id')
        else
          @player.attr('data-youtube-id','rAq2rNEru8A')
      when "cue_zones"
        # console.log "Cue Zones"
      else
        attribute_data = 'data-'+value+'-enable'
        if @player.attr(attribute_data ) is "true"
          @player.attr(attribute_data , "false")
        else
          @player.attr(attribute_data , "true")
    @prepareAndPlayVideo(autoplay)
    
  unprepareVideo: ->
    sublime.unprepare @player[0]
  
  prepareAndPlayVideo: (autoplay) ->
    # Don't autoplay if it change the design
    if autoplay
      @player.attr('data-autoplay','true')
    else
      @player.removeAttr('data-autoplay')
    sublime.prepare @player[0]
    